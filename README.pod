=head1 NAME

pacaur - a fast workflow AUR wrapper using cower as backend

=head1 SYNOPSIS

Usage: I<pacaur> E<lt>operationE<gt> [ options ] [ package(s) ]

=head1 DESCRIPTION

pacaur is an Arch User Repository (AUR) helper aiming at speed and simplicity,
designed to allow a fast workflow and to use an uncluttered interface. It is
build upon the well designed cower and expac C backends. Invoking pacaur
consists of supplying an operation, any applicable options, and usually one or
more targets.

=head1 USERBASE TARGET

pacaur provides two sets of command line options: commands which are AUR
specific, and commands that call the pacman binary and extend for AUR functions.
As such, pacaur can be used by users who prefer to keep their AUR frontend
separated from pacman, or by users who prefer to have a single tool to manage
officials and AUR repositories.

Fundamental knowledge of the AUR manual build process with makepkg is assumed to
be known.

=head1 OPERATIONS

=over 4

=item B<-s, --search>

Search for packages with the I<target>(s) as the search term(s). Queries with
multiple targets will return the result of the intersection of all query
results. Extended regex patterns as defined by POSIX are allowed.

=item B<-i, --info>

Show info for I<target>. Pass this option twice to fetch more detailed info.

=item B<-d, --download>

Download I<target> PKGBUILD. Pass this option twice to fetch dependencies (done
recursively).

=item B<-m, --makepkg>

Download I<target> PKGBUILD and build target. Missing dependencies will be
installed as required to ensure the build to succeed, before being automatically
uninstalled.

=item B<-y, --sync>

Download I<target> PKGBUILD, build and install target. Missing dependencies
will be automatically installed as required.

=item B<-k, --check>

Check foreign packages for updates in the AUR. Without any arguments, all
manually installed packages will be checked. If targets are supplied, only
those targets will be checked.

=item B<-u, --update>

Update foreign packages in the AUR. Without any arguments, all manually
installed packages will be updated. If targets are supplied, only those targets
will be updated.

=item B<-S, -Ss, -Si, -Sii, -Sw. -Su, -Qu, -Sc, -Scc>

Additionally, pacaur wraps B<pacman operations> and extends respectively its
install, search, info, download, update, check updates and clean functions to
the AUR.
Pacaur will also pass any pacman related options to the pacman binary. This
behavior can be disabled with the I<fallback> variable in the config file.

=item B<-c, --clean>

Remove I<target> build directory. Pass this option twice to clean the entire
build directory.

=item B<-v, --version>

Display version and exit.

=item B<-h, --help>

Display the help message and quit.

=back


=head1 OPTIONS

=over 4

=item B<-e, --edit>

Edit I<target> PKGBUILD when downloading or building target. Can also be used
as a standalone command.

=item B<-f, --force>

Overwrite existing files when downloading.

=item B<-q, --quiet>

Show less information for search and query operations. Search will only show
package names and not version, group, and description information.

=item B<-a, --aur>

When used with pacman extended operations, only search or install packages from
the AUR.

=item B<-r, --repo>

When used with pacman extended operations, only search or install packages from
the repositories.

=item B<--devel>

When used with update operations, also upgrade AUR development packages
(supported are cvs, svn, git, hg, bzr and darcs development packages).

=item B<--ignore> I<package(s)>

Ignore a package upgrade. Can be used more than once. Also accepts a comma
delimited list as a single argument. Packages listed in pacman and cower's
IgnorePkg directive are honored.

=item B<--noconfirm>

Perform commands without confirmation from the user.

=item B<--noedit>

Perform commands without editing any installation files. Bypass --edit option.

=item B<--rebuild>

Always rebuild packages regardless of any existing file in $PKGDEST directory.

=item B<--asroot>

When building AUR package(s) as root, allow makepkg to run as root user.

=item B<--carch>

When I<carchmagic> option is disabled, temporarily enable $CARCH bash magic
compatibility.

=back


=head1 CONFIG FILE

pacaur honors a system-wide config file which will be looked for first at

  $XDG_CONFIG_DIRS/pacaur/pacaur.conf

and falling back to

  /etc/xdg/pacaur/pacaur.conf

User-defined configuration files overriding the general settings will be looked
for first at

  $XDG_CONFIG_HOME/pacaur/config

and falling back to

  $HOME/.config/pacaur/config

In addition, pacaur fully honors cower config file. See B<cower>(1).

The available options are: 

=head2 GENERAL OPTIONS

=over 4

=item B<buildDir>

Define the build directory. Default is B</tmp/pacaurtmp-$USER>.

=item B<editor>

Define the editor. Default is B<$EDITOR>, with a fallback on I<vi>.

=item B<color>

Enable color output. This option requires the pacman binary I<pacman-color> to
be installed. Default is B<false>.

=item B<clean>

Clean build directory after operation. Default is B<true>.

=item B<fallback>

Extend pacman commands to the AUR. Default is B<true>.

=back

=head2 ADVANCED OPTIONS

=over 4

=item B<editpkgbuild>

When using pacman extended operations, enable PKGBUILD editing.
Default is B<true>.

=item B<editinstall>

When using pacman extended operations, enable install script editing.
Default is B<true>.

=item B<cleandevel>

When clean config option is enabled, clean build directory of development
packages. Default is B<true>.

=item B<carchmagic>

Enable compatibility with I<$CARCH> bash magic. When enabled, use a full bash
dependency solver instead of cower's internal solver to ensure compatibility
with architecture-independent PKGBUILDs using the $CARCH makepkg variable, at
the cost of a slight dependency solving speed only. Default is B<false>.

=back

=head1 SEE ALSO

B<cower>(1), B<pacman>(8), B<makepkg>(8)


=head1 AUTHOR

Remy Marquis E<lt>remy.marquis@gmail.comE<gt>

