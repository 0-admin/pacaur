#!/bin/bash

#
# pacaur: a fast workflow AUR wrapper using cower as backend
#

name="pacaur"
version="3.3.1"

#
# Config
#

# avoid locale issues
export LANG=C

# source makepkg variables
source /etc/makepkg.conf
[[ -r "$HOME/.makepkg.conf" ]] && source "$HOME/.makepkg.conf"

# temp directory
tmpdir="${TMPDIR:-/tmp}/${name}tmp-$USER"

# config options
builddir="${BUILDDIR:-$tmpdir}" # build directory
editor="${EDITOR:-vi}"          # PKGBUILD editor
editpkgbuild=true               # edit PKGBUILD
editinstall=true                # edit install script
fallback=true                   # pacman fallback to the AUR
clean=true                      # cleanup after install
cleandevel=true                 # cleanup devel after install
color=false                     # color support via pacman-color
secure=false                    # enhanced security

# set xdg path
if [[ -n "${XDG_CONFIG_DIRS}" ]]; then
    xdg_config=($(echo "${XDG_CONFIG_DIRS}" | awk -F ":" '{for (i=1; i<=NF; i++) print $i}' ))
    for i in ${xdg_config[@]}; do
        [[ -d "$i" ]] && export XDG_CONFIG_DIRS=$i && break
    done
fi

# source config
configdir="${XDG_CONFIG_DIRS:-/etc/xdg}/${name}"
userconfigdir="${XDG_CONFIG_HOME:-${HOME}/.config}/${name}"
source "$configdir/${name}.conf"
[[ -r "$userconfigdir/config" ]] && source "$userconfigdir/config"

# color
if $color; then
    pacmanbin='pacman-color'
    cower='cower --color=always'
    reset="\e[0m"
    colorR="\e[1;31m"
    colorG="\e[1;32m"
    colorY="\e[1;33m"
    colorB="\e[1;34m"
    colorM="\e[1;35m"
    colorC="\e[1;36m"
    colorW="\e[1;39m"
else
    pacmanbin='pacman'
    cower='cower'
fi

# set up directories
[[ -d "$tmpdir" ]] && [[ ! -w "$tmpdir" ]] && sudo rm -rf "$tmpdir"
[[ ! -d "$tmpdir" ]] && mkdir -p "$tmpdir"
[[ ! -d "$builddir" ]] && mkdir -p "$builddir"

#
# Functions
#

SearchAur() {
    $cower ${coweropts[@]} $@
}

InfoAur() {
    $cower ${coweropts[@]} $@
}

DownloadAur() {
    while read -r flag pkg info; do
        case $flag in
            S)  [[ -n "$info" ]] && deps+=("$pkg"); [[ $operation = download ]] && echo "$info";;
            W)  continue;;
            E)  echo "$info";;
        esac
    done < <($cower ${coweropts[@]} -db $@ ${ignoreopts[@]} -t $builddir 2>&1)

    timeout ${deps[@]}
}

DownloadPkgs() {
    if [[ $secure = true ]]; then
        if [[ $operation = download && $count -lt 2 ]]; then
            DownloadAur ${aurpkgs[@]} && return
        else
            coweropts+=("-d") && DownloadAur ${aurpkgs[@]} # recursive here
        fi
        # check for CARCH 32/64bits bash magic
        for i in "${deps[@]}"; do
            [[ -e "$builddir/$i/PKGBUILD" ]] && [[ -n $(grep 'CARCH' "$builddir/$i/PKGBUILD") ]] && msg "e" "${colorW}\$CARCH${reset} variable detected. ${colorW}$i${reset} requires the full bash dependency solver to be enabled with the --insecure option."
        done
    else
        allaurdeps+=("${aurpkgs[@]}")
        FindPkgsDeps ${aurpkgs[@]}
        deps=("${allaurdeps[@]}")
        # reduce root binary deps
        repodeps=($(echo "${repodeps[@]}" | sed 's/ /\n/g' | sort -u))
    fi

    # return AUR deps pkgs only
    aurdepspkgs=(${deps[@]:${#aurpkgs[@]}:${#deps[@]}})

    # show binary deps
    if [[ -n "${repodeps[@]}" ]]; then
        for i in "${repodeps[@]}"; do
            allrepopkgs+=($(pactree -su "$i"))
        done
        repodepspkgs=($($pacmanbin -T "${allrepopkgs[@]}"))

        # providers check
        [[ -n "${repodepspkgs[@]}" ]] && ProviderChecks ${repodepspkgs[@]}

        [[ -n "${repodepspkgs[@]}" ]] && expac -S -1 "${colorY}::${reset} ${colorW}%n${reset} is available in ${colorM}%r${reset}" "${repodepspkgs[@]}" | sort -u
    fi
}

FindPkgsDeps() {
    [[ -z "${depspkgsaur[@]}" ]] && depspkgsaur=("${aurpkgs[@]}")

    DownloadAur ${depspkgsaur[@]}
    [[ $operation = download && $count -lt 2 ]] && return

    # source pkgs
    for i in "${deps[@]}"; do
        if [[ -e "$builddir/$i/PKGBUILD" ]]; then
            # preview before sourcing
            [[ -n $(grep -w 'sudo' "$builddir/$i/PKGBUILD" | grep -v '^depends') ]] && msg "w" "Potentially dangerous '${colorR}sudo${reset}' detected in ${colorW}$i${reset}" && PreviewPkgs $i
            source "$builddir/$i/PKGBUILD" && sourcedpkgs+=($(echo -e "${depends[*]}\n${makedepends[*]}"))
        else
            msg "e" "Could not read ${colorW}$i${reset} PKGBUILD"
        fi
    done

    # remove installed deps
    depspkgs=($($pacmanbin -T "${sourcedpkgs[@]}"))

    # split binary and AUR depends pkgs
    [[ -e "$tmpdir/aurdeps" ]] && rm "$tmpdir/aurdeps"
    [[ -n "${depspkgs[@]}" ]] && depspkgsrepo=($(expac -S -1 -v %n ${depspkgs[@]} 2>"$tmpdir/aurdeps")) && repodeps+=(${depspkgsrepo[@]})
    [[ -e "$tmpdir/aurdeps" ]] && depspkgsaur=($(cat "$tmpdir/aurdeps" | grep 'error:' | awk -F "\`" '{print $2}' | awk -F "'" '{print $1}')) || unset depspkgsaur
    unset deps sourcedpkgs depends makedepends depspkgs

    if [[ -n "${depspkgsaur[@]}" ]]; then
        # remove AUR package versioning
        local j=0
        for i in "${depspkgsaur[@]}"; do
            depspkgsaur[$j]=$(echo "$i" | awk -F "<" '{print $1}' | awk -F ">" '{print $1}' | awk -F "=" '{print $1}')
            ((j++))
        done
        for i in "${depspkgsaur[@]}"; do
            [[ " ${allaurdeps[@]} " =~ " $i " ]] && continue || allaurdeps+=("$i")
        done
        FindPkgsDeps ${depspkgsaur[@]}
    fi
}

UpgradeAur() {
    # ignore check
    GetIgnoredPkgs

    msg "i" "${colorW}Starting AUR upgrade...${reset}"
    aurpkgs+=($($cower -u ${pkgs[@]} ${ignoreopts[@]} | tee 1>&2 >(awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g")))

    # add devel packages
    if [[ $devel ]]; then
        allaurpkgs=($($pacmanbin -Qmq))
        Qversion=($(expac -Q %v "${allaurpkgs[@]}"))

        for i in "${allaurpkgs[@]}"; do
            DownloadPkgbuild $i &
            paraexec
        done
        wait
        for ((i=0; i<${#allaurpkgs[@]}; i++)); do
            GetDevelPrefix "$tmpdir/${allaurpkgs[$i]}.PKGBUILD"
            if [[ -n "$develprefix" ]]; then
                if [[ " ${ignoredpkgs[@]} " =~ " ${allaurpkgs[$i]} " ]]; then
                    msg "w" "${colorW}${allaurpkgs[$i]} ${colorY}${Qversion[$i]}${reset}: ignoring package upgrade"
                    continue
                else
                    msg "i" "${colorW}${allaurpkgs[$i]} ${colorY}${Qversion[$i]} ${reset}"
                    aurpkgs+=("${allaurpkgs[$i]}")
                fi
            fi
        done
    fi

    nothingtodo ${aurpkgs[@]}
    timeout ${aurpkgs[@]}
}

Prompt() {
    echo -e "\n${colorY}AUR Targets (${#deps[@]}):${reset} ${deps[@]}\n"

    if [[ ! $noconfirm ]]; then
        [[ $installpkg ]] && action="installation" || action="download"
        if ! proceedY "Proceed with $action?"; then
            CleanUp ${deps[@]} &>/dev/null
            exit
        fi
    fi

    EditPkgs ${deps[@]}
}

PreviewPkgs() {
    EditPkgs $i
    if proceedN "${colorY}::${reset} Do you ${colorW}really${reset} want to continue?"; then
        CleanUp ${deps[@]} &>/dev/null
        exit
    fi
}

EditPkgs() {
    [[ $noedit ]] && return
    for i in "$@"; do
        GetInstallScript $i
        if [[ ! $edit ]]; then
            # edit pkgbuild
            if [[ ! $editpkgbuild = false ]]; then
                if proceedY "${colorB}::${reset} Edit ${colorW}$i${reset} PKGBUILD?"; then
                    [[ -e "$builddir/$i/PKGBUILD" ]] && $editor "$builddir/$i/PKGBUILD" && msg "s" "${colorW}$i${reset} PKGBUILD edited" || msg "e" "Could not open ${colorW}$i${reset} PKGBUILD"
                fi
            fi
            # edit install script
            if [[ ! $editinstall = false ]]; then
                if [[ -n "$installscript" ]]; then
                    if proceedY "${colorB}::${reset} View ${colorW}$i${reset} .install script?"; then
                        [[ -e "$builddir/$i/$installscript" ]] && $editor "$builddir/$i/$installscript" && msg "s" "${colorW}$i${reset} install script viewed" || msg "e" "Could not open ${colorW}$i${reset} install script"
                    fi
                fi
            fi
        else
            [[ -e "$builddir/$i/PKGBUILD" ]] && $editor "$builddir/$i/PKGBUILD" && msg "s" "${colorW}$i${reset} PKGBUILD edited" || msg "e" "Could not open ${colorW}$i${reset} PKGBUILD"
            if [[ -n "$installscript" ]]; then
                [[ -e "$builddir/$i/$installscript" ]] && $editor "$builddir/$i/$installscript" && msg "s" "${colorW}$i${reset} install script viewed" || msg "e" "Could not open ${colorW}$i${reset} install script"
            fi
        fi
    done
}

MakePkgs() {
    # initialize sudo
    sudo -v

    # reverse deps order
    deps=($(echo "${deps[@]}" | awk -F "\n" '{print}' | awk -F " " '{for (i=NF;i>=1;i--) print $i}'))

    # makepkg options
    [[ $color != true ]] && makeopts+=("--nocolor")
    export PACMAN=$pacmanbin

    # check destination folder
    [[ ! $installpkg ]] && [[ ! $PKGDEST ]] && [[ $clean = true ]] && msg "e" "Please set ${colorW}PKGDEST${reset} variable in /etc/makepkg.conf or disable ${colorW}clean${reset} option."

    # install provider packages
    if [[ -n "${providerpkgs[@]}" ]]; then
        msg "i" "Installing ${colorW}${providerpkgs[@]}${reset} dependencies..."
        yes | sudo $pacmanbin -S ${providerpkgs[@]} --asdeps
    fi

    for i in "${deps[@]}"; do
        # check package cache
        [[ $PKGDEST && ! $rebuild ]] && GetAurVersion $i && FindCachedPkg "$i-$Aversion"
        if [[ $cachedpkg ]]; then
            if [[ $installpkg ]]; then
                msg "i" "Installing ${colorW}$i${reset} cached package..."
                yes | sudo $pacmanbin -U $cachedpkg ${pacopts[@]}
            else
                msg "i" "Package ${colorW}$i${reset} already available in cache"
            fi
        else
            # build
            if [[ -e "$builddir/$i/PKGBUILD" ]]; then
                msg "i" "Building ${colorW}$i${reset} package..."
                cd "$builddir/$i"
                if [[ $installpkg ]]; then
                    # install
                    yes | makepkg -sfi ${makeopts[@]}
                else
                    if [[ " ${aurdepspkgs[@]} " =~ " $i " ]]; then
                        # install AUR deps
                        msg "i" "Installing ${colorW}$i${reset} dependencies..."
                        yes | makepkg -sfi ${makeopts[@]}
                    else
                        # install then remove binary deps
                        yes | makepkg -sfr ${makeopts[@]}
                    fi
                fi
            else
                msg "e" "Could not open ${colorW}$i${reset} PKGBUILD"
            fi
            # clean
            CleanUp $i
        fi
        # set dep status
        if [[ $installpkg ]]; then
            [[ ! $upgrade ]] && ! [[ " ${pkgs[@]} " =~ " $i " ]] && sudo $pacmanbin -D $i --asdeps ${pacopts[@]} &>/dev/null
            [[ " ${pacopts[@]} " =~ " --asdeps " ]] && sudo $pacmanbin -D $i --asdeps ${pacopts[@]} &>/dev/null
            [[ " ${pacopts[@]} " =~ " --asexplicit " ]] && sudo $pacmanbin -D $i --asexplicit ${pacopts[@]} &>/dev/null
        else
            sudo $pacmanbin -D $i --asdeps ${pacopts[@]} &>/dev/null
        fi
    done
    # remove AUR deps
    if [[ ! $installpkg ]]; then
        [[ -n "${aurdepspkgs[@]}" ]] && msg "i" "Removing installed AUR dependencies..."
        [[ -n "${aurdepspkgs[@]}" ]] && sudo $pacmanbin -Rsn ${aurdepspkgs[@]} --noconfirm
    fi
}

CleanUp() {
    [[ ! $clean = true ]] && return
    if [[ -n "$@" ]]; then
        cd "$builddir"
        for i in "$@"; do
            if [[ ! $cleandevel = true && $count -lt 2 ]]; then
                GetDevelPrefix "$builddir/$i/PKGBUILD"
                [[ -n "$develprefix" ]] && msg "w" "${colorW}$i${reset} cleaning skipped" && continue
            else
                # hack for vcs protected files
                chmod -R 755 $i &>/dev/null
                rm -r $i &>/dev/null && msg "s" "${colorW}$i${reset} cleaned" || msg "w" "Could not clean ${colorW}$i${reset}"
            fi
        done
    else
        # hack for vcs protected files
        chmod -R 755 $builddir/* &>/dev/null
        rm -r $builddir/* &>/dev/null && msg "s" "Build directory cleaned" || msg "w" "Build directory already cleaned"
    fi
}

CheckAur() {
    $cower ${coweropts[@]} $@
    # hack to override unconventional cower exit codes
    [[ -z "${pkgs[@]}" ]] && return 0 || expac -Q '%n' ${pkgs[@]} &>/dev/null
}

CheckRepo() {
    outofdate=($($pacmanbin -Quq $@))
    if [[ -n "${outofdate[@]}" ]]; then
        Qversion=($(expac -Q %v "${outofdate[@]}"))
        Sversion=($(expac -S -1 %v "${outofdate[@]}"))
        for ((i=0; i<${#outofdate[@]}; i++)); do
            Qgroup[$i]=$(expac -Q -l " " '%G' "${outofdate[$i]}")
        done
        local i=0
        for j in "${outofdate[@]}"; do
            [[ -n "${Qgroup[$i]}" ]] && Qgroup[$i]="(${Qgroup[$i]})"
            [[ ! $quiet ]] && msg "i" "${colorW}$j ${colorR}${Qversion[$i]} ${reset}-> ${colorG}${Sversion[$i]}${reset} ${colorB}${Qgroup[$i]}${reset}" || echo "$j"
            ((i++))
        done
    fi
}

CleanCache() {
    if [[ $PKGDEST && $PKGDEST != '/var/cache/pacman/pkg/' ]]; then
        [[ ! $aur ]] && echo ""
        echo -e "${colorW}AUR cache directory:${reset} $PKGDEST"
        if [[ $count -eq 1 ]]; then
            echo -e "${colorW}Packages to keep:${reset}\n  All locally installed packages"
            if ! proceedY "Do you want to remove all other packages from AUR cache?"; then
                exit
            fi

            echo "removing old packages from cache..."
            for i in $(ls $PKGDEST | sed "s#\(.*\)-.*#\1#g" ); do
                pkgname=$(echo "$i" | sed "s#\(.*\)-.*-.*#\1#g")
                [[ $i != $(expac -Q '%n-%v' "$pkgname") ]] && rm $PKGDEST/$i-*
            done
        else
            if ! proceedN "Do you want to remove ALL files from AUR cache?"; then
                echo "removing all files from AUR cache..."
                rm $PKGDEST/* &>/dev/null
            fi
        fi
    fi
}

ProviderChecks() {
    allproviders=($(expac -S %P "${repodepspkgs[@]}" | uniq))

    for ((i=0; i<${#allproviders[@]}; i++)); do
        providers=($(expac -Ss %n "^${allproviders[$i]}$"))
        [[ ! ${#providers[@]} -gt 1 ]] && continue

        # skip if already provided
        for j in "${providerpkgs[@]}"; do
            provided+=($(expac -S %P $j))
        done
        [[ -n "${provided[@]}" ]] && [[ " ${provided[@]} " =~ " ${allproviders[$i]} " ]] && continue

        if [[ ! $noconfirm ]]; then
            msg "i" "${colorW} There are ${#providers[@]} providers available for ${allproviders[$i]}:${reset}"
            expac -S -1 '   %!) %n (%r) ' ${providers[@]}

            local nb=-1
            while [[ $nb -lt 0 || $nb -ge ${#providers} ]]; do

                echo -e -n "\nEnter a number (default=0):"
                nbchar=$(echo "${#providers[@]}" | wc -m)
                read -n ${#nbchar} nb
                echo ""

                case $nb in
                    [0-9]) [[ $nb -lt 0 || $nb -ge ${#providers[@]} ]] && echo -e "\n${colorR}::${reset} invalid value: $nb is not between 0 and ${#providers[@]}" && ((i--)) || break;;
                    '') nb=0;;
                    *) echo -e "${colorR}::${reset} invalid number: $nb";;
                esac

            done
        else
            local nb=0
        fi
        providerpkgs+=(${providers[$nb]})
   done
}

ConflictChecks() {
    if [[ ! $noconfirm ]]; then
        local k=0
        for i in "${deps[@]}"; do
            unset conflicts
            [[ -e "$builddir/$i/PKGBUILD" ]] && conflicts=("$(grep "^conflicts=" "$builddir/$i/PKGBUILD" | cut -d '=' -f2 | tr -d "'\"()")")
            [[ -z "${conflicts[@]}" ]] && conflicts=($(expac -Q %n "$i")) || [[ -n "${conflicts[@]}" ]] && conflicts=($(expac -Q %n "${conflicts[@]}"))
            # return when no conflict
            [[ " ${conflicts[@]} " =~ " $i " ]] && continue || conflictspkgs=("${conflicts[@]}")

            for j in "${conflictspkgs[@]}"; do
                if [[ $j = $i ]]; then
                    continue
                else
                    if ! proceedN "${colorB}::${reset} ${colorW}$i and $j are in conflict. Remove $j?${reset}"; then
                        break
                    else
                        [[ " ${pkgs[@]} " =~ " $i " ]] && unset deps[$k] || msg "e" "failed to prepare transaction (conflicting dependencies)"
                    fi
                fi
            done
            ((k++))
        done
    fi

    nothingtodo ${deps[@]}
}

ReinstallChecks() {
    exist=($(expac -Q %n "${aurpkgs[@]}"))
    Qversion=($(expac -Q %v "${aurpkgs[@]}"))
    for ((i=0; i<${#exist[@]}; i++)); do
        [[ " ${aurpkgs[@]} " =~ " ${exist[$i]} " ]] && GetAurVersion ${exist[$i]} || continue
        [[ $(vercmp "$Aversion" "${Qversion[$i]}") -gt 0 ]] && continue
        if [[ ! $needed ]]; then
            msg "w" "${exist[$i]}-${Qversion[$i]} is up to date -- reinstalling"
        else
            msg "w" "${exist[$i]}-${Qversion[$i]} is up to date -- skipping"
            deps=(${deps[@]/${exist[$i]}/})
        fi
    done

    nothingtodo ${deps[@]}
}

OutofdateChecks() {
    for i in "${deps[@]}"; do
        DownloadJson $i &
        paraexec
    done
    wait
    for i in "${deps[@]}"; do
        [[ -e "$tmpdir/$i.json" ]] && [[ -n $(grep '"OutOfDate":1' "$tmpdir/$i.json") ]] && msg "w" "$i is flagged ${colorR}out of date${reset}"
    done
}

IgnoreChecks() {
    [[ ! $upgrade ]] && GetIgnoredPkgs
    [[ -z "${ignoredpkgs[@]}" ]] && return

    checkaurpkgs=("${aurpkgs[@]}")
    unset aurpkgs

    # check targets
    for i in "${checkaurpkgs[@]}"; do
        if [[ " ${ignoredpkgs[@]} " =~ " $i " ]]; then
            if [[ ! $upgrade && ! $noconfirm ]]; then
                if ! proceedY "${colorY}::${reset} $i is in IgnorePkg/IgnoreGroup. Install anyway?"; then
                    msg "w" "${colorW}$i${reset}: ignoring package upgrade"
                    continue
                fi
            else
                continue
            fi
        fi
        aurpkgs+=("$i")
    done

    nothingtodo ${aurpkgs[@]}
}

IgnoreDepsChecks() {
    [[ -z "${ignoredpkgs[@]}" ]] && return
    unset deps

    # add checked targets
    deps+=("${aurpkgs[@]}")

    # check dependencies
    for i in "${repodepspkgs[@]}"; do
        if [[ " ${ignoredpkgs[@]} " =~ " $i " ]]; then
            msg "w" "${colorW}$i${reset}: ignoring package upgrade"
            CleanUp ${aurpkgs[@]} &>/dev/null
            CleanUp ${aurdepspkgs[@]} &>/dev/null
            msg "e" "Unresolved dependency '${colorW}$i${reset}'"
        fi
    done
    for i in "${aurdepspkgs[@]}"; do
        if [[ " ${ignoredpkgs[@]} " =~ " $i " ]]; then
            if [[ ! $noconfirm ]]; then
                if ! proceedY "${colorY}::${reset} $i dependency is in IgnorePkg/IgnoreGroup. Install anyway?"; then
                    CleanUp ${aurpkgs[@]} &>/dev/null
                    CleanUp ${aurdepspkgs[@]} &>/dev/null
                    msg "e" "Unresolved dependency '${colorW}$i${reset}'"
                fi
            else
                msg "w" "${colorW}$i${reset}: ignoring package upgrade"
                CleanUp ${aurpkgs[@]} &>/dev/null
                CleanUp ${aurdepspkgs[@]} &>/dev/null
                msg "e" "Unresolved dependency '${colorW}$i${reset}'"
            fi
        fi
        deps+=("$i")
    done
}

GetIgnoredPkgs() {
    ignoredpkgs+=($(grep '^ *IgnorePkg' '/etc/pacman.conf' | cut -d '=' -f 2- | tr -d "'\""))
    [[ -e "$HOME/.config/cower/config" ]] && ignoredpkgs+=($(grep '^ *IgnorePkg' "$HOME/.config/cower/config" | cut -d '=' -f 2- | tr -d "'\""))
    ignoredpkgs=(${ignoredpkgs[@]//,/ })
}

GetIgnoredGrps() {
    ignoredgrps+=($(grep '^ *IgnoreGroup' '/etc/pacman.conf' | cut -d '=' -f 2- | tr -d "'\""))
}

GetAurVersion() {
    [[ -e "$builddir/$@/PKGBUILD" ]] && Apkgver=$(grep '^pkgver' "$builddir/$@/PKGBUILD" | cut -d '=' -f 2- | tr -d "'\"")
    [[ -e "$builddir/$@/PKGBUILD" ]] && Apkgrel=$(grep '^pkgrel' "$builddir/$@/PKGBUILD" | cut -d '=' -f 2- | tr -d "'\"")
    Aversion="$Apkgver-$Apkgrel"
}

GetInstallScript() {
    installscript="$(grep "^install=" "$builddir/$@/PKGBUILD" | cut -d '=' -f 2-)"
    [[ -e "$builddir/$@/PKGBUILD" ]] && Apkgname=$(grep '^pkgname' "$builddir/$@/PKGBUILD" | cut -d '=' -f 2- | tr -d "'\"")
    installscript=$(echo $installscript | sed -e "s/\$pkgname/$Apkgname/g")
}

GetDevelPrefix() {
    unset develprefix
    [[ -e "$@" ]] && develprefix="$(grep -E "_(cvsroot|svntrunk|gitroot|hgroot|bzrtrunk|darcstrunk)" "$@")"
}

FindCachedPkg() {
    cachedpkg="$PKGDEST/$@-${CARCH}${PKGEXT}"
    [[ ! -f "$cachedpkg" ]] && cachedpkg="$PKGDEST/$@-any${PKGEXT}"
    [[ ! -f "$cachedpkg" ]] && cachedpkg=""
}

DownloadPkgbuild() {
    DownloadJson $i
    Aurlpath=$(cat "$tmpdir/$i.json" | grep -Po '"URLPath":".*?[^\\]"' | awk -F ":" '{print $2}' | sed -e 's/\\//g' -e 's/\"//g')
    [[ ! -s "$tmpdir/$i.PKGBUILD" ]] && curl -Lfs "https://aur.archlinux.org${Aurlpath%/*}/PKGBUILD" > "$tmpdir/$i.PKGBUILD"
}

DownloadJson() {
    [[ ! -s "$tmpdir/$i.json" ]] && curl -LfGs --data-urlencode "arg=$i" "https://aur.archlinux.org/rpc.php?type=info" > "$tmpdir/$i.json"
}

Core() {
    IgnoreChecks
    DownloadPkgs
    IgnoreDepsChecks
    ConflictChecks
    ReinstallChecks
    OutofdateChecks
    Prompt
    MakePkgs
}

ClassifyPkgs() {
    if [[ $fallback = true ]]; then
        [[ $repo ]] && repopkgs=("${pkgs[@]}")
        [[ $aur ]] && aurpkgs=("${pkgs[@]}")
        if [[ ! $repo && ! $aur ]]; then
            GetIgnoredGrps
            for i in "${pkgs[@]}"; do
                [[ " ${ignoredgrps[@]} " =~ " $i " ]] && repopkgs+=("$i") && continue
                [[ -z "$($pacmanbin -S --print $i 2>&1 | grep -v 'error:')" ]] && aurpkgs+=("$i") || repopkgs+=("$i")
            done
        fi
    else
        [[ ! $aur ]] && repopkgs=("${pkgs[@]}") || aurpkgs=("${pkgs[@]}")
    fi
}

proceedY() {
    echo -ne "$* [Y/n] "
    read -n 1 yn
    echo ""
    case $yn in
        [Yy]|'') return 0;;
        *) return 1;;
    esac
}

proceedN() {
    echo -ne "$* [y/N] "
    read -n 1 ny
    echo ""
    case $ny in
        [Nn]|'') return 0;;
        *) return 1;;
    esac
}

paraexec() {
    while (( $(jobs | wc -l) >= 10 )); do
        sleep 0.1
        jobs > /dev/null
    done
}

timeout() {
    [[ -z "$(echo "$@" | grep -v 'resolve host name' | grep -v 'no results found for')" ]] && exit 1 || return 0
}

nothingtodo() {
    [[ -z "$@" ]] && echo " there is nothing to do" && exit || return 0
}

msg() {
    case "$1" in
        i) echo -e "${colorB}::${reset} $2";;   # info
        s) echo -e "${colorG}::${reset} $2";;   # success
        w) echo -e "${colorY}::${reset} $2";;   # warn
        e) echo -e "${colorR}::${reset} $2";    # error
           exit 1;;
    esac
}

usage() {
    echo "usage:  ${name} <operation> [options] [package(s)]"
    echo "operations:"
    echo " pacman extension"
    echo "   -S, -Q           extend pacman operations to the AUR"
    echo " AUR only"
    echo "   -s, --search     search AUR repository for matching strings"
    echo "   -i, --info       view package information -- pass twice for details"
    echo "   -d, --download   download target(s) -- pass twice to download AUR dependencies"
    echo "   -m, --makepkg    download and make target(s)"
    echo "   -y, --sync       download, make and install target(s)"
    echo "   -k, --check      check for AUR update(s)"
    echo "   -u, --update     update AUR package(s)"
    echo " general"
    echo "   -v, --version    display version information"
    echo "   -h, --help       display help information"
    echo "   --fixbackend     quickly rebuild backend"
    echo ""
    echo "options:"
    echo " pacman extension - can be used with the -S, -Ss, -Si, -Sii, -Sw, -Su, -Qu, -Sc, -Scc operations"
    echo "   -a, --aur        only search, install or clean packages from the AUR"
    echo "   -r, --repo       only search, install or clean packages from the repositories"
    echo " general"
    echo "   -e, --edit       edit target(s) PKGBUILD and view install script"
    echo "   -c, --clean      clean target(s) build files -- can be combined with the -m, -y, -u operations"
    echo "   -q, --quiet      show less information for query and search"
    echo "   --devel          consider AUR development packages upgrade"
    echo "   --ignore         ignore a package upgrade (can be used more than once)"
    echo "   --noconfirm      do not prompt for any confirmation"
    echo "   --noedit         do not prompt to edit files"
    echo "   --rebuild        always rebuild package(s)"
    echo "   --insecure       disable secure mode and enable bash magic compatibility"
    echo ""
}

version() {
    echo "$name $version"
}

fixbackend() {
    msg "i" "Rebuilding ${colorW}cower${reset} backend..."
    cowerexec=($(expac -Q %n cower)) # cower-git compatibility
    mkdir -p "$builddir/$cowerexec" && cd "$builddir/$cowerexec"
    DownloadPkgbuild $cowerexec
    makepkg -p $tmpdir/$cowerexec.PKGBUILD -sfic ${makeopts[@]} --noconfirm
    CleanUp $cowerexec
}


#
# Main
#

# get short arguments
args=("$@")
for i in "${args[@]}"; do
    [[ "$i" =~ ^-[a-zA-Z0-9] ]] && opts+=("$i")
done

count=0

# get options
while [[ -n "${!OPTIND}" ]]; do

    while getopts "sidmykufecqrahvVDQRSTUbglnoptw-:" OPT; do
        pacmanarg+=("-$OPT");

        case "$OPT" in
            -)
                case "$OPTARG" in
                    # pacaur
                    search) operation=search; coweropts+=("-s"); aur='1';;
                    info) operation=info; coweropts+=("-i"); aur='1';;
                    download) operation=download; ((count++));;
                    makepkg) operation=sync; coweropts+=("-f"); aur='1';;
                    sync) operation=sync; installpkg=true; coweropts+=("-f"); aur='1';;
                    check) operation=upgrades; coweropts+=("-u"); aur='1';;
                    update) operation=sync; upgrade=true; installpkg=true; coweropts+=("-f"); selective=true; aur='1';;
                    force) coweropts+=("-f"); pacopts+=("--force");;
                    edit) edit=true; [[ ! $pacQ && ! $operation ]] && operation=editpkg;;
                    clean) operation=cleanpkg; clean=true; ((count++));;
                    quiet) quiet=true; pacopts+=("--quiet"); coweropts+=("-q"); coweropts+=("--color=never");;
                    # pacman
                    repo) repo='1';;
                    aur) aur='1';;
                    # others
                    devel) devel=true;;
                    asroot) makeopts+=("--asroot");;
                    ignore) ignoredpkgs+=("${!OPTIND}"); ignoreopts+=("--ignore ${!OPTIND}"); shift;;
                    needed) needed=true; pacopts+=("--needed");;
                    noconfirm) noconfirm=true; pacopts+=("--noconfirm");;
                    noedit) noedit=true;;
                    rebuild) rebuild=true;;
                    insecure) secure=false;;
                    fixbackend|allanbrokeit) fixbackend; exit;;
                    version) version; exit;;
                    help) usage; exit;;
                    *) pacopts+=("--$OPTARG");;
                esac
                ;;
            # pacaur
            s)  [[ $pacS ]] && operation=search && coweropts+=("-s");
                [[ $pac || $pacQ || $pacS ]] && continue || operation=search; coweropts+=("-s"); aur='1';;
            i)  [[ $pacS ]] && operation=info && coweropts+=("-i");
                [[ $pac || $pacQ || $pacS ]] && continue || operation=info; coweropts+=("-i"); aur='1';;
            d)  [[ $pac || $pacQ || $pacS ]] && continue || operation=download; ((count++));;
            m)  [[ $pac || $pacQ || $pacS ]] && continue || operation=sync; coweropts+=("-f"); aur='1';;
            y)  [[ $pacS ]] && operation=sync && refresh=true;
                [[ $pac || $pacQ || $pacS ]] && continue || operation=sync; installpkg=true; coweropts+=("-f"); aur='1';;
            k)  [[ $pac || $pacQ || $pacS ]] && continue || operation=upgrades; coweropts+=("-u"); aur='1';;
            u)  [[ $pacQ ]] && operation=upgrades && coweropts+=("-u");
                [[ $pacS ]] && operation=sync && upgrade=true && coweropts+=("-f");
                [[ $pac || $pacQ || $pacS ]] && continue || operation=sync; upgrade=true; installpkg=true; coweropts+=("-f"); selective=true; aur='1';;
            f)  [[ $pac || $pacQ || $pacS ]] && continue || coweropts+=("-f");;
            e)  [[ $pacQ ]] && pacopts+=("--explicit") && continue || edit=true;
                [[ ! $operation ]] && operation=editpkg;;
            c)  [[ $pacS ]] && operation=cleancache && ((count++));
                [[ $pac || $pacQ || $pacS ]] && continue || [[ ! $operation ]] && operation=cleanpkg; clean=true && ((count++));;
            q)  quiet=true; pacopts+=("--quiet"); coweropts+=("-q"); coweropts+=("--color=never");;
            # pacman
            r)  repo='1';;
            a)  aur='1';;
            Q)  pacQ='1';;
            S)  pacS='1'; operation=sync; coweropts+=("-f");
                [[ "${opts[@]}" =~ "w" ]] && continue || installpkg=true;
                [[ "${opts[@]}" =~ "g" || "${opts[@]}" =~ "l" ]] && unset operation;;
            [A-Z]) pac='1';;
            # others
            h)  [[ "${opts[@]}" =~ ^-[A-Z] ]] && unset operation && continue || usage; exit;;
            v)  [[ "${opts[@]}" =~ ^-[A-Z] ]] && unset operation && continue || version; exit;;
            *)  continue;;
        esac
    done

    # packages
    [[ -z "${!OPTIND}" ]] && break || pkgs+=("${!OPTIND}")
    shift $OPTIND
    OPTIND=1
done

pacmanarg=(${pacmanarg[@]/--/})
pacmanarg=(${pacmanarg[@]/-r/})
[[ $pacS ]] && pacmanarg=(${pacmanarg[@]/-e/})

# sanity check
[[ ! $editor ]] && [[ ! -f /usr/bin/vi ]] && msg "e" "The ${colorW}editor${reset} variable is not set.\nCheck configuration in $configdir/${name}.conf"
[[ ! -f /usr/bin/$pacmanbin ]] && msg "e" "The binary ${colorW}$pacmanbin${reset} is not installed.\nCheck configuration in $configdir/${name}.conf"
[[ ! -w "$builddir" ]] && msg "e" "You do not have write permission to build packages in ${colorW}$builddir${reset}."
[[ -z "${pkgs[@]}" ]] && [[ $operation = download || $operation = sync || $operation = editpkg || ($operation = cleanpkg && $count -eq 1) ]] && [[ ! $refresh && ! $upgrade ]] && msg "e" "no targets specified (use -h for help)"
[[ $repo && $aur ]] && msg "e" "target not found"

# operations
case $operation in
    download)
        # download (-d) handling
        aurpkgs+=("${pkgs[@]}") && DownloadPkgs
        EditPkgs ${deps[@]}
        exit;;
    cleanpkg)
        # clean (-c) handling
        CleanUp ${pkgs[@]}
        exit;;
    editpkg)
        # edit (-e) handling
        EditPkgs ${pkgs[@]}
        exit;;
    search)
        # search (-Ss, -s) handling
        [[ ! $aur ]] && $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${pkgs[@]}
        [[ ! $repo ]] && [[ $fallback = true || $aur ]] && SearchAur ${pkgs[@]}
        exit;;
    info)
        # info (-Si, -i) handling
        [[ -z "${pkgs[@]}" ]] && $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} || ClassifyPkgs ${pkgs[@]}
        [[ -n "${repopkgs[@]}" ]] && $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
        if [[ -n "${aurpkgs[@]}" ]]; then
            [[ $fallback = true && ! $aur ]] && msg "w" "Package(s) ${colorW}${aurpkgs[*]}${reset} not found in repositories, trying ${colorM}AUR${reset}..."
            InfoAur ${aurpkgs[@]}
        fi
        exit;;
    sync)
        # sync (-S, -y), downloadonly (-Sw, -m), refresh (-Sy), sysupgrade (-Su, -u) handling
        if [[ ! $upgrade ]]; then
            [[ -z "${pkgs[@]}" ]] && sudo $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} || ClassifyPkgs ${pkgs[@]}
            [[ -n "${repopkgs[@]}" ]] && sudo $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
            if [[ -n "${aurpkgs[@]}" ]]; then
                [[ $refresh ]] && [[ -z "${repopkgs[@]}" ]] && sudo $pacmanbin -Sy ${pacopts[@]} ${ignoreopts[@]}
                [[ $fallback = true && ! $aur ]] && msg "w" "Package(s) ${colorW}${aurpkgs[*]}${reset} not found in repositories, trying ${colorM}AUR${reset}..."
                Core ${aurpkgs[@]}
            fi
        else
            [[ ! $selective ]] && ClassifyPkgs ${pkgs[@]} && unset pkgs # selective upgrade switch
            [[ ! $aur ]] && sudo $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
            [[ -n "${aurpkgs[@]}" ]] && [[ $fallback = true && ! $aur ]] && msg "w" "Package(s) ${colorW}${aurpkgs[*]}${reset} not found in repositories, trying ${colorM}AUR${reset}..."
            [[ ! $repo ]] && [[ $fallback = true || $aur ]] && UpgradeAur && Core ${aurpkgs[@]}
        fi
        exit;;
    upgrades)
        # upgrades (-Qu, -k) handling
        [[ ! $aur ]] && CheckRepo ${pkgs[@]}
        [[ ! $repo ]] && [[ $fallback = true || $aur ]] && CheckAur ${pkgs[@]}
        exit;;
    cleancache)
        # clean (-Sc) handling
        [[ ! $aur ]] && sudo $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
        [[ ! $repo ]] && [[ $fallback = true || $aur ]] && CleanCache ${pkgs[@]}
        exit;;
    *)
        # others operations handling
        if [[ -z "${pkgs[@]}" || -n "$(echo "${pacmanarg[@]}" | grep -e "-[QTgl]")" ]]; then
            $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${pkgs[@]}
        else
            sudo $pacmanbin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${pkgs[@]}
        fi
        exit;;
esac

# vim:set ts=4 sw=2 et:
