#!/bin/bash

#
# pacaur: a fast workflow AUR wrapper using cower as backend
#

name="pacaur"
version="2.5.7"


#
# Config
#

# locale
export LANG=C

# general options
editor=${EDITOR:-vi}            # PKGBUILD editor
color=false                     # enable color
clean=true                      # cleanup after install
fallback=true                   # pacman fallback

# advanced options
editpkgbuild=true               # edit PKGBUILD
editinstall=true                # edit install script
cleandevel=true                 # cleanup devel after install
carchmagic=true                 # CARCH compatibility

# source config
if [[ -n "${XDG_CONFIG_DIRS}" ]]; then
    xdg_config=($(echo "${XDG_CONFIG_DIRS}" | awk -F ":" '{for (i=1; i<=NF; i++) print $i}' ))
    for i in ${xdg_config[@]}; do
        [[ -d "$i" ]] && export XDG_CONFIG_DIRS=$i && break
    done
fi
configDir="${XDG_CONFIG_DIRS:-/etc/xdg}/${name}"
userconfigDir="${XDG_CONFIG_HOME:-${HOME}/.config}/${name}"
source "$configDir/${name}.conf"
[[ -r "$userconfigDir/config" ]] && source "$userconfigDir/config"

# color
if $color; then
    pacmanBin='pacman-color'
    cower='cower --color=always'
    reset="\e[0m"
    colorR="\e[1;31m"
    colorG="\e[1;32m"
    colorY="\e[1;33m"
    colorB="\e[1;34m"
    colorM="\e[1;35m"
    colorC="\e[1;36m"
    colorW="\e[1;39m"
else
    pacmanBin='pacman'
    cower='cower'
fi

# source makepkg variables
source /etc/makepkg.conf

# set up directories
tmpDir="${TMPDIR:-/tmp}/${name}tmp-$USER"
buildDir="${BUILDDIR:-$tmpDir}"
[[ -d "$tmpDir" ]] && [[ ! -w "$tmpDir" ]] && sudo rm -rf "$tmpDir"
[[ ! -d "$tmpDir" ]] && mkdir -p "$tmpDir"
[[ ! -d "$buildDir" ]] && mkdir -p "$buildDir"


#
# Functions
#

SearchAur() {
    [[ $quiet ]] && $cower -sq --color=never $@ || $cower -s $@
}

InfoAur() {
    $cower ${pacmanarg[@]} $@
}

DownloadAur() {
    [[ $recursive ]] && d="-dd" || d="-d"
    [[ $operation = download ]] && deps+=($($cower $d ${coweropts[@]} $@ -t $buildDir | tee 1>&2 >(awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g")))
    [[ ! $operation = download ]] && deps+=($($cower $d ${coweropts[@]} $@ -t $buildDir 2>"$tmpDir/repodeps" | awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g"))
    [[ -e "$tmpDir/repodeps" ]] && grep 'no results found for' "$tmpDir/repodeps"

    timeout ${deps[@]}
}

DownloadPkgs() {
    if [[ $carchmagic = false ]]; then
        recursive=true && DownloadAur ${aurpkgs[@]}
        # check for CARCH 32/64bits bash magic
        for i in "${deps[@]}"; do
            [[ -n $(grep 'CARCH' "$buildDir/$i/PKGBUILD") ]] && error "${colorW}$i${reset} requires \$CARCH bash magic compatibility to be enabled.\nCheck configuration in $configDir/${name}.conf or use --carch option."
        done
        # check binary depends pkgs
        [[ -e "$tmpDir/repodeps" ]] && repodeps=($(cat "$tmpDir/repodeps" | grep -v 'no results found for' | awk -F " " '{print $2}' | sed -r "s:\x1B\[[0-9;]*[mK]::g"))
    else
        allaurdeps+=("${aurpkgs[@]}")
        FindPkgsDeps ${aurpkgs[@]}
        deps=("${allaurdeps[@]}")
        # reduce root binary deps
        repodeps=($(echo "${repodeps[@]}" | sed 's/ /\n/g' | sort -u))
    fi

    # return AUR deps pkgs only
    aurdepspkgs=(${deps[@]:${#aurpkgs[@]}:${#deps[@]}})

    # show binary deps
    if [[ -n "${repodeps[@]}" ]]; then
        for i in "${repodeps[@]}"; do
            allrepopkgs+=($(pactree -su "$i"))
        done
        repodepspkgs=($($pacmanBin -T "${allrepopkgs[@]}"))
        [[ -n "${repodepspkgs[@]}" ]] && expac -S -1 "${colorY}::${reset} ${colorW}%n${reset} is available in ${colorM}%r${reset}" "${repodepspkgs[@]}" | sort -u
    fi
}

FindPkgsDeps() {
    [[ -z "${depspkgsaur[@]}" ]] && depspkgsaur=("${aurpkgs[@]}")

    DownloadAur ${depspkgsaur[@]}

    # source pkgs
    for i in "${deps[@]}"; do
        . "$buildDir/$i/PKGBUILD"
        sourcedpkgs+=($(echo -e "${depends[*]}\n${makedepends[*]}"))
    done

    # remove installed deps
    depspkgs=($($pacmanBin -T "${sourcedpkgs[@]}"))

    # split binary and AUR depends pkgs
    [[ -e "$tmpDir/aurdeps" ]] && rm "$tmpDir/aurdeps"
    [[ -n "${depspkgs[@]}" ]] && depspkgsrepo=($(expac -S -1 -v %n ${depspkgs[@]} 2>"$tmpDir/aurdeps")) && repodeps+=(${depspkgsrepo[@]})
    [[ -e "$tmpDir/aurdeps" ]] && depspkgsaur=($(cat "$tmpDir/aurdeps" | grep 'error:' | awk -F "\`" '{print $2}' | awk -F "'" '{print $1}')) || unset depspkgsaur
    unset deps sourcedpkgs depends makedepends depspkgs

    if [[ -n "${depspkgsaur[@]}" ]]; then
        # remove AUR package versioning
        j=0
        for i in "${depspkgsaur[@]}"; do
            depspkgsaur[$j]=$(echo "$i" | awk -F "<" '{print $1}' | awk -F ">" '{print $1}' | awk -F "=" '{print $1}')
            ((j++))
        done
        for i in "${depspkgsaur[@]}"; do
            [[ " ${allaurdeps[@]} " =~ " $i " ]] && continue || allaurdeps+=("$i")
        done
        FindPkgsDeps ${depspkgsaur[@]}
    fi
}

UpgradeAur() {
    # ignore check
    GetIgnoredPkgs

    info "${colorW}Starting AUR upgrade...${reset}"

    aurpkgs+=($($cower -u ${pkgs[@]} ${ignoreopts[@]} | tee 1>&2 >(awk -F " " '{print $2}'| sed -r "s:\x1B\[[0-9;]*[mK]::g")))

    # add devel packages
    if [[ $devel ]]; then
        allaurpkgs=($($pacmanBin -Qmq))
        Qversion=($(expac -Q %v "${allaurpkgs[@]}"))

        for i in "${allaurpkgs[@]}"; do
            DownloadPkgbuild $i &
            paraexec
        done
        wait
        for ((i=0; i<${#allaurpkgs[@]}; i++)); do
            unset _darcstrunk _cvsroot _gitroot _svntrunk _bzrtrunk _hgroot
            . "$tmpDir/${allaurpkgs[$i]}.PKGBUILD"
            if [[ ${_darcstrunk} || ${_cvsroot} || ${_gitroot} || ${_svntrunk} || ${_bzrtrunk} || ${_hgroot} ]]; then
                if [[ " ${ignoredpkgs[@]} " =~ " ${allaurpkgs[$i]} " ]]; then
                    warn "${colorW}${allaurpkgs[$i]} ${colorY}${Qversion[$i]}${reset}: ignoring package upgrade"
                    continue
                else
                    info "${colorW}${allaurpkgs[$i]} ${colorY}${Qversion[$i]} ${reset}"
                    aurpkgs+=("${allaurpkgs[$i]}")
                fi
            fi
        done
    fi

    nothingtodo ${aurpkgs[@]}
    timeout ${aurpkgs[@]}
}

Prompt() {
    echo -e "\n${colorY}AUR Targets (${#deps[@]}):${reset} ${deps[@]}\n"

    if [[ ! $noconfirm ]]; then
        [[ $installpkg ]] && action="installation" || action="download"
        if ! proceedY "Proceed with $action?"; then
            CleanUp ${deps[@]} &>/dev/null
            exit
        fi
    fi

    EditPkgs ${deps[@]}
}

EditPkgs() {
    [[ $noedit || ! $edit ]] && return
    for i in "$@"; do
       # edit pkgbuild
       if [[ ! $editpkgbuild = false ]]; then
            if [[ $option ]]; then
                if proceedY "${colorB}::${reset} Edit ${colorW}$i${reset} PKGBUILD?"; then
                    [[ -e "$buildDir/$i/PKGBUILD" ]] && $editor "$buildDir/$i/PKGBUILD" && success "${colorW}$i${reset} PKGBUILD edited" || error "Could not open ${colorW}$i${reset} PKGBUILD"
                fi
            else
                [[ -e "$buildDir/$i/PKGBUILD" ]] && $editor "$buildDir/$i/PKGBUILD" && success "${colorW}$i${reset} PKGBUILD edited" || error "Could not open ${colorW}$i${reset} PKGBUILD"
            fi
        fi
        # edit install script
        if [[ ! $editinstall = false ]]; then
            unset install
            [[ -e "$buildDir/$i/PKGBUILD" ]] && source "$buildDir/$i/PKGBUILD"
            if [[ $install ]]; then
                if [[ $option ]]; then
                    if proceedY "${colorB}::${reset} View ${colorW}$i${reset} .install script?"; then
                        [[ -e "$buildDir/$i/$install" ]] && $editor "$buildDir/$i/$install" && success "${colorW}$i${reset} install script viewed" || error "Could not open ${colorW}$i${reset} install script"
                    fi
                else
                    [[ -e "$buildDir/$i/$install" ]] && $editor "$buildDir/$i/$install" && success "${colorW}$i${reset} install script viewed" || error "Could not open ${colorW}$i${reset} install script"
                fi
            fi
        fi
    done
}

MakePkgs() {
    # initialize sudo
    sudo -v

    # reverse deps order
    deps=($(echo "${deps[@]}" | awk -F "\n" '{print}' | awk -F " " '{for (i=NF;i>=1;i--) print $i}'))

    # makepkg options
    [[ $color != true ]] && makeopts+=("--nocolor")
    export PACMAN=$pacmanBin

    if [[ $installpkg ]]; then
        for i in "${deps[@]}"; do
            # check package cache
            [[ $PKGDEST && ! $rebuild ]] && GetAurVersion $i && FindCachedPkg "$i-$Aversion"
            if [[ $cachedpkg ]]; then
                info "Installing ${colorW}$i${reset} cached package..."
                yes | sudo $pacmanBin -U $cachedpkg ${pacopts[@]}
            else
                # build and install
                if [[ -e "$buildDir/$i/PKGBUILD" ]]; then
                    info "Building ${colorW}$i${reset} package..."
                    cd "$buildDir/$i"
                    yes | makepkg -sfi ${makeopts[@]}
                else
                    error "Could not open ${colorW}$i${reset} PKGBUILD"
                fi
            fi
            # set dep status
            [[ ! $upgrade ]] && ! [[ " ${pkgs[@]} " =~ " $i " ]] && sudo $pacmanBin -D $i --asdeps ${pacopts[@]} &>/dev/null
            [[ " ${pacopts[@]} " =~ " --asdeps " ]] && sudo $pacmanBin -D $i --asdeps ${pacopts[@]} &>/dev/null
            [[ " ${pacopts[@]} " =~ " --asexplicit " ]] && sudo $pacmanBin -D $i --asexplicit ${pacopts[@]} &>/dev/null
        done
    else
        # check destination folder
        [[ ! $PKGDEST ]] && [[ $clean = true ]] && error "Please set ${colorW}PKGDEST${reset} variable in /etc/makepkg.conf or disable ${colorW}clean${reset} option."

        for i in "${deps[@]}"; do
            # check package cache
            [[ $PKGDEST && ! $rebuild ]] && GetAurVersion $i && FindCachedPkg "$i-$Aversion"
            if [[ $cachedpkg ]]; then
                info "Package ${colorW}$i${reset} already available in cache"
            else
                # build
                if [[ -e "$buildDir/$i/PKGBUILD" ]]; then
                    info "Building ${colorW}$i${reset} package..."
                    cd "$buildDir/$i"
                    if [[ " ${aurdepspkgs[@]} " =~ " $i " ]]; then
                        # install AUR deps
                        info "Installing ${colorW}$i${reset} dependency..."
                        yes | makepkg -sfi ${makeopts[@]}
                    else
                        # install then remove binary deps
                        yes | makepkg -sfr ${makeopts[@]}
                    fi
                else
                    error "Could not open ${colorW}$i${reset} PKGBUILD"
                fi
                # set dep status
                sudo $pacmanBin -D $i --asdeps ${pacopts[@]} &>/dev/null
            fi
        done
        # remove AUR deps
        [[ -n "${aurdepspkgs[@]}" ]] && info "Removing installed AUR dependencies..."
        [[ -n "${aurdepspkgs[@]}" ]] && sudo $pacmanBin -Rsn ${aurdepspkgs[@]} --noconfirm
    fi
}

CleanUp() {
    if [[ $clean = true ]]; then
        if [[ $count -eq 1 ]]; then
            cd "$buildDir"
            for i in "$@"; do
                # hack for vcs protected files
                chmod -R 755 $i &>/dev/null
                rm -r $i &>/dev/null && success "${colorW}$i${reset} cleaned" || warn "Could not clean ${colorW}$i${reset}"
            done
        else
            # skip if devel package
            if [[ $cleandevel = false && $count -ne 2 ]]; then
                for i in "$@"; do
                    cd "$buildDir"
                    unset _darcstrunk _cvsroot _gitroot _svntrunk _bzrtrunk _hgroot
                    . "$i/PKGBUILD"
                    [[ ${_darcstrunk} || ${_cvsroot} || ${_gitroot} || ${_svntrunk} || ${_bzrtrunk} || ${_hgroot} ]] && success "${colorW}$i${reset} cleaning skipped" && continue
                    # hack for vcs protected files
                    chmod -R 755 $i &>/dev/null
                    rm -r $i &>/dev/null && success "${colorW}$i${reset} cleaned" || warn "Could not clean ${colorW}$i${reset}"
                done
            else
                # hack for vcs protected files
                chmod -R 755 $buildDir/* &>/dev/null
                rm -r $buildDir/* &>/dev/null && success "Build directory cleaned" || warn "Build directory already cleaned"
            fi
        fi
    fi
}

CheckAur() {
    [[ $quiet ]] && $cower -uq --color=never $@ || $cower -u $@
    # hack to override unconventional cower exit codes
    [[ -z "${pkgs[@]}" ]] && return 0 || expac -Q '%n' ${pkgs[@]} &>/dev/null
}

CheckRepo() {
    outofdate=($($pacmanBin -Quq $@))
    if [[ -n "${outofdate[@]}" ]]; then
        Qversion=($(expac -Q %v "${outofdate[@]}"))
        Sversion=($(expac -S -1 %v "${outofdate[@]}"))
        for ((i=0; i<${#outofdate[@]}; i++)); do
            Qgroup[$i]=$(expac -Q -l " " '%G' "${outofdate[$i]}")
        done
        local i=0
        for j in "${outofdate[@]}"; do
            [[ -n "${Qgroup[$i]}" ]] && Qgroup[$i]="(${Qgroup[$i]})"
            [[ ! $quiet ]] && info "${colorW}$j ${colorR}${Qversion[$i]} ${reset}-> ${colorG}${Sversion[$i]}${reset} ${colorB}${Qgroup[$i]}${reset}" || echo "$j"
            ((i++))
        done
    fi
}

CleanCache() {
    # set cache variables
    source /etc/makepkg.conf

    if [[ $PKGDEST && $PKGDEST != '/var/cache/pacman/pkg/' ]]; then
        [[ ! $aur ]] && echo ""
        echo -e "${colorW}AUR cache directory:${reset} $PKGDEST"
        if [[ $count -eq 1 ]]; then
            echo -e "${colorW}Packages to keep:${reset}\n  All locally installed packages"
            if ! proceedY "Do you want to remove all other packages from AUR cache?"; then
                exit
            fi

            echo "removing old packages from cache..."
            for i in $(ls $PKGDEST | sed "s#\(.*\)-.*#\1#g" ); do
                pkgname=$(echo "$i" | sed "s#\(.*\)-.*-.*#\1#g")
                [[ $i != $(expac -Q '%n-%v' "$pkgname") ]] && rm $PKGDEST/$i-*
            done
        else
            if ! proceedN "Do you want to remove ALL files from AUR cache?"; then
                echo "removing all files from AUR cache..."
                rm $PKGDEST/* &>/dev/null
            fi
        fi
    fi
}

ConflictChecks() {
    if [[ ! $noconfirm ]]; then
        local k=0
        for i in "${deps[@]}"; do
            unset conflicts
            [[ -e "$buildDir/$i/PKGBUILD" ]] && [[ -n $(grep 'conflicts=(' "$buildDir/$i/PKGBUILD") ]] && . "$buildDir/$i/PKGBUILD"
            [[ -z "${conflicts[@]}" ]] && conflicts=($(expac -Q %n "$i")) || [[ -n "${conflicts[@]}" ]] && conflicts=($(expac -Q %n "${conflicts[@]}"))
            # return when no conflict
            [[ " ${conflicts[@]} " =~ " $i " ]] && continue || conflictspkgs=("${conflicts[@]}")

            for j in "${conflictspkgs[@]}"; do
                if [[ $j = $i ]]; then
                    continue
                else
                    if ! proceedN "${colorB}::${reset} ${colorW}$i and $j are in conflict. Remove $j?${reset}"; then
                        break
                    else
                        [[ " ${pkgs[@]} " =~ " $i " ]] && unset deps[$k] || error "failed to prepare transaction (conflicting dependencies)"
                    fi
                fi
            done
            ((k++))
        done
    fi

    nothingtodo ${deps[@]}
}

ReinstallChecks() {
    exist=($(expac -Q %n "${deps[@]}"))
    Qversion=($(expac -Q %v "${deps[@]}"))
    for ((i=0; i<${#exist[@]}; i++)); do
        [[ " ${deps[@]} " =~ " ${exist[$i]} " ]] && GetAurVersion ${exist[$i]} || continue
        [[ $(vercmp "$Aversion" "${Qversion[$i]}") -gt 0 ]] && continue || warn "${exist[$i]}-${Qversion[$i]} is up to date -- reinstalling"
    done
}

OutofdateChecks() {
    for i in "${deps[@]}"; do
        DownloadJson $i &
        paraexec
    done
    wait
    for i in "${deps[@]}"; do
        [[ -n $(grep '"OutOfDate":"1"' "$tmpDir/$i.json") ]] && warn "$i is flagged ${colorR}out of date${reset}"
    done
}

IgnoreChecks() {
    [[ ! $upgrade ]] && GetIgnoredPkgs
    [[ -z "${ignoredpkgs[@]}" ]] && return

    checkaurpkgs=("${aurpkgs[@]}")
    unset aurpkgs

    # check targets
    for i in "${checkaurpkgs[@]}"; do
        if [[ " ${ignoredpkgs[@]} " =~ " $i " ]]; then
            if [[ ! $upgrade && ! $noconfirm ]]; then
                if ! proceedY "${colorY}::${reset} $i is in IgnorePkg/IgnoreGroup. Install anyway?"; then
                    continue
                fi
            else
                warn "${colorW}$i${reset}: ignoring package upgrade"
                continue
            fi
        fi
        aurpkgs+=("$i")
    done

    nothingtodo ${aurpkgs[@]}
}

IgnoreDepsChecks() {
    unset deps

    # add checked targets
    deps+=("${aurpkgs[@]}")

    # check dependencies
    for i in "${repodepspkgs[@]}"; do
        if [[ " ${ignoredpkgs[@]} " =~ " $i " ]]; then
            warn "${colorW}$i${reset}: ignoring package upgrade"
            CleanUp ${aurpkgs[@]} &>/dev/null
            CleanUp ${aurdepspkgs[@]} &>/dev/null
            error "Unresolved dependency '${colorW}$i${reset}'"
        fi
    done
    for i in "${aurdepspkgs[@]}"; do
        if [[ " ${ignoredpkgs[@]} " =~ " $i " ]]; then
            if [[ ! $noconfirm ]]; then
                if ! proceedY "${colorY}::${reset} $i dependency is in IgnorePkg/IgnoreGroup. Install anyway?"; then
                    CleanUp ${aurpkgs[@]} &>/dev/null
                    CleanUp ${aurdepspkgs[@]} &>/dev/null
                    error "Unresolved dependency '${colorW}$i${reset}'"
                fi
            else
                warn "${colorW}$i${reset}: ignoring package upgrade"
                CleanUp ${aurpkgs[@]} &>/dev/null
                CleanUp ${aurdepspkgs[@]} &>/dev/null
                error "Unresolved dependency '${colorW}$i${reset}'"
            fi
        fi
        deps+=("$i")
    done
}

GetIgnoredPkgs() {
    ignoredpkgs+=($(grep '^ *IgnorePkg' '/etc/pacman.conf' | cut -d '=' -f 2-))
    [[ -e "$HOME/.config/cower/config" ]] && ignoredpkgs+=($(grep '^ *IgnorePkg' "$HOME/.config/cower/config" | cut -d '=' -f 2-))
    ignoredpkgs=(${ignoredpkgs[@]//,/ })
}

GetIgnoredGrps() {
    ignoredgrps+=($(grep '^ *IgnoreGroup' '/etc/pacman.conf' | cut -d '=' -f 2-))
}

GetAurVersion() {
    Apkgver=$(grep '^pkgver' "$buildDir/$@/PKGBUILD" | cut -d '=' -f 2-)
    Apkgrel=$(grep '^pkgrel' "$buildDir/$@/PKGBUILD" | cut -d '=' -f 2-)
    Aversion="$Apkgver-$Apkgrel"
}

FindCachedPkg() {
    cachedpkg="$PKGDEST/$@-${CARCH}${PKGEXT}"
    [[ ! -f "$cachedpkg" ]] && cachedpkg="$PKGDEST/$@-any${PKGEXT}"
    [[ ! -f "$cachedpkg" ]] && cachedpkg=""
}

DownloadPkgbuild() {
    [[ ! -f "$tmpDir/$i.PKGBUILD" ]] && curl -Lfs "https://aur.archlinux.org/packages/$i/PKGBUILD" > "$tmpDir/$i.PKGBUILD" || error "no results found for $i"
}

DownloadJson() {
    [[ ! -f "$tmpDir/$i.json" ]] && curl -Lfs "https://aur.archlinux.org/rpc.php?type=info&arg=$i" > "$tmpDir/$i.json" || error "no results found for $i"
}

Core() {
    IgnoreChecks
    DownloadPkgs ${aurpkgs[@]}
    [[ -n "${ignoredpkgs[@]}" ]] && IgnoreDepsChecks ${deps[@]}
    ConflictChecks ${deps[@]}
    ReinstallChecks ${deps[@]}
    OutofdateChecks ${deps[@]}
    Prompt ${deps[@]}
    MakePkgs ${deps[@]}
    CleanUp ${deps[@]}
}

ClassifyPkgs() {
    if [[ $fallback = true ]]; then
        [[ $repo ]] && repopkgs=("${pkgs[@]}")
        [[ $aur ]] && aurpkgs=("${pkgs[@]}")
        if [[ ! $repo && ! $aur ]]; then
            GetIgnoredGrps
            for i in "${pkgs[@]}"; do
                [[ " ${ignoredgrps[@]} " =~ " $i " ]] && repopkgs+=("$i") && continue
                [[ -z "$($pacmanBin -S --print $i 2>&1 | grep -v 'error:')" ]] && aurpkgs+=("$i") || repopkgs+=("$i")
            done
        fi
    else
        [[ ! $aur ]] && repopkgs=("${pkgs[@]}") || aurpkgs=("${pkgs[@]}")
    fi
}

proceedY() {
    echo -ne "$* [Y/n] "
    read -n 1 yn
    echo ""
    case $yn in
        [Yy]|'') return 0;;
        *) return 1;;
    esac
}

proceedN() {
    echo -ne "$* [y/N] "
    read -n 1 ny
    echo ""
    case $ny in
        [Nn]|'') return 0;;
        *) return 1;;
    esac
}

paraexec() {
    while (( $(jobs | wc -l) >= 10 )); do
        sleep 0.1
        jobs > /dev/null
    done
}

timeout() {
    [[ -z "$(echo "$@" | grep -v 'resolve host name' | grep -v 'no results found for')" ]] && exit 1 || return 0
}

nothingtodo() {
    [[ -z "$@" ]] && echo " there is nothing to do" && exit || return 0
}

error() {
    echo -e "${colorR}::${reset} $1" && exit 1
}

success() {
    echo -e "${colorG}::${reset} $1"
}

warn() {
    echo -e "${colorY}::${reset} $1"
}

info() {
    echo -e "${colorB}::${reset} $1"
}

usage() {
    echo "usage:  ${name} <operation> [options] [package(s)]"
    echo "operations:"
    echo " AUR only"
    echo "   -s, --search    search AUR repository for matching strings"
    echo "   -i, --info      view package information -- pass twice for details"
    echo "   -d, --download  download target(s) -- pass twice to download AUR dependencies"
    echo "   -m, --makepkg   download and make target(s)"
    echo "   -y, --sync      download, make and install target(s)"
    echo "   -k, --check     check for AUR update(s)"
    echo "   -u, --update    update AUR package(s)"
    echo " general"
    echo "   -c, --clean     clean target(s) build files -- pass twice to clean the entire build directory"
    echo "   -v, --version   display version information"
    echo "   -h, --help      display help information"
    echo ""
    echo "options:"
    echo "   -e, --edit      edit target PKGBUILD -- can be combined with the -d, -m, -y, -u flags"
    echo "   -f, --force     overwrite existing files -- can be combined with the -d flag"
    echo "   -q, --quiet     show less information for query and search"
    echo "   --devel         consider AUR development packages upgrade"
    echo "   --ignore        ignore a package upgrade (can be used more than once)"
    echo "   --noconfirm     do not prompt for any confirmation"
    echo "   --noedit        do not prompt to edit files"
    echo "   --rebuild       always rebuild package"
    echo ""
    echo "pacman options:"
    echo " can be used with the -S, -Ss, -Si, -Sii, -Sw, -Su, -Qu, -Sc, -Scc operations"
    echo "   -a, --aur       only search or install packages from the AUR"
    echo "   -r, --repo      only search or install packages from the repositories"
    echo ""
}

version() {
    echo "$name $version"
}

fixbackend() {
    info "Rebuilding ${colorW}cower${reset} backend..."
    mkdir -p "$buildDir/cower" && cd "$buildDir/cower"
    curl -o PKGBUILD http://aur.archlinux.org/packages/cower/PKGBUILD
    makepkg -sfi ${makeopts[@]} --noconfirm
    count=1 && CleanUp cower
}


#
# Main
#

# get short arguments
args=("$@")
for i in "${args[@]}"; do
    [[ "$i" =~ ^-[a-zA-Z0-9] ]] && opts+=("$i")
done

pkgs=()
count=0
index=0

# get options
while [[ $index -ne 1 ]]; do

    while getopts "sidmykufecqrahvVDQRSTUbglnoptw-:" OPT; do
        pacmanarg+=("-$OPT");

        case "$OPT" in
            -)
                case "$OPTARG" in
                    # pacaur
                    search) operation=search;;
                    info) operation=info;;
                    download) operation=download; ((count++));;
                    makepkg) operation=makepkg; coweropts+=("-f");;
                    sync) operation=makepkg; installpkg=true; coweropts+=("-f");;
                    check) operation=check;;
                    update) operation=makepkg; upgrade=true; installpkg=true; coweropts+=("-f");;
                    force) coweropts+=("-f"); pacopts+=("--force");;
                    edit) edit=true; editpkg=true;;
                    clean) operation=cleanpkg; clean=true; ((count++));;
                    quiet) quiet=true; pacopts+=("--quiet");;
                    # pacman
                    repo) repo='1';;
                    aur) aur='1';;
                    # others
                    devel) devel=true;;
                    asroot) makeopts+=("--asroot");;
                    carch) carchmagic=true;;
                    ignore) ignoredpkgs+=("${args[$OPTIND]}"); ignoreopts+=("--ignore" "${args[$OPTIND]}"); shift `expr $OPTIND - 1`;;
                    noconfirm) noconfirm=true; pacopts+=("--noconfirm");;
                    noedit) noedit=true;;
                    rebuild) rebuild=true;;
                    fixbackend|allanbrokeit) fixbackend && exit;;
                    version) version && exit;;
                    help) usage && exit;;
                    *) pacopts+=("--$OPTARG");;
                esac
                ;;
            # pacaur
            s)  [[ $pacS ]] && operation=pacsearch;
                [[ $pac || $pacQ || $pacS ]] && continue || operation=search;;
            i)  [[ $pacS ]] && operation=pacinfo;
                [[ $pac || $pacQ || $pacS ]] && continue || operation=info;;
            d)  [[ $pac || $pacQ || $pacS ]] && continue || operation=download && ((count++));;
            m)  [[ $pac || $pacQ || $pacS ]] && continue || operation=makepkg && coweropts+=("-f");;
            y)  [[ $pacS ]] && operation=sync && refresh=true && coweropts+=("-f");
                [[ $pac || $pacQ || $pacS ]] && continue || operation=makepkg && installpkg=true && coweropts+=("-f");;
            k)  [[ $pac || $pacQ || $pacS ]] && continue || operation=check;;
            u)  [[ $pacQ ]] && operation=upgrades;
                [[ $pacS ]] && operation=sync && upgrade=true && coweropts+=("-f");
                [[ $pac || $pacQ || $pacS ]] && continue || operation=makepkg && upgrade=true && installpkg=true && coweropts+=("-f");;
            f)  [[ $pac || $pacQ || $pacS ]] && continue || coweropts+=("-f");;
            e)  [[ $pacQ ]] && pacopts+=("--explicit") && continue || edit=true;
                [[ ! $operation ]] && operation=editpkg;;
            c)  [[ $pacS ]] && operation=cleancache && ((count++));
                [[ $pac || $pacQ || $pacS ]] && continue || operation=cleanpkg && clean=true && ((count++));;
            q)  [[ $pacQ || $pacS ]] && pacopts+=("--quiet") || quiet=true;;
            # pacman
            r)  repo='1';;
            a)  aur='1';;
            Q)  pacQ='1';;
            S)  pacS='1'; operation=sync; edit=true; coweropts+=("-f");
                [[ "${opts[@]}" =~ "w" ]] && continue || installpkg=true;;
            [A-Z]) pac='1';;
            # others
            h)  [[ "${opts[@]}" =~ ^-[A-Z] ]] && unset operation && continue || usage && exit;;
            v)  [[ "${opts[@]}" =~ ^-[A-Z] ]] && unset operation && continue || version && exit;;
            *)  continue;;
        esac
    done

    # packages
    shift
    [[ "$1" =~ ^--[a-zA-Z0-9] ]] && continue || pkgs+=("$1")

    index=$OPTIND
done
pkgs=(${pkgs[@]//})
pacmanarg=(${pacmanarg[@]/--/})
pacmanarg=(${pacmanarg[@]/-r/})

# sanity check
[[ ! $editor ]] && [[ ! -f /usr/bin/vi ]] && error "The ${colorW}editor${reset} variable is not set.\nCheck configuration in $configDir/${name}.conf"
[[ ! -f /usr/bin/$pacmanBin ]] && error "The binary ${colorW}$pacmanBin${reset} is not installed.\nCheck configuration in $configDir/${name}.conf"
[[ ! -w "$buildDir" ]] && error "You do not have write permission to build packages in ${colorW}$buildDir${reset}."
[[ -z "${pkgs[@]}" ]] && [[ $operation = download || $operation = makepkg || $operation = sync || $operation = editpkg ]] && [[ ! $refresh && ! $upgrade ]] && error "no targets specified (use -h for help)"
[[ $repo && $aur ]] && error "target not found"

# operations
case $operation in
    search)
        # search (-s) handling
        SearchAur ${pkgs[@]}
        exit;;
    info)
        # info (-i) handling
        InfoAur ${pkgs[@]}
        exit;;
    download)
        # download (-d) handling
        [[ $count -ne 1 ]] && recursive=true
        DownloadAur ${pkgs[@]}
        EditPkgs ${deps[@]}
        exit;;
    makepkg)
        # makepkg (-m), sync (-y), update (-u) handling
        [[ $upgrade ]] && UpgradeAur || aurpkgs=("${pkgs[@]}")  # selective upgrade compatibility
        Core ${aurpkgs[@]}
        exit;;
    check)
        # check (-k) handling
        CheckAur ${pkgs[@]}
        exit;;
    cleanpkg)
        # clean (-c) handling
        CleanUp ${pkgs[@]}
        exit;;
    editpkg)
        # edit (-e) handling
        EditPkgs ${pkgs[@]}
        exit;;
    pacsearch)
        # pacman search (-Ss) handling
        [[ ! $aur ]] && $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${pkgs[@]}
        [[ ! $repo ]] && [[ $fallback = true || $aur ]] && SearchAur ${pkgs[@]}
        exit;;
    pacinfo)
        # pacman info (-Si) handling
        [[ ! ${pkgs[@]} ]] && $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} || ClassifyPkgs ${pkgs[@]}
        [[ -n "${repopkgs[@]}" ]] && $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
        if [[ -n "${aurpkgs[@]}" ]]; then
            [[ $fallback = true && ! $aur ]] && warn "Package(s) ${colorW}${aurpkgs[@]}${reset} not found in repositories, trying ${colorM}AUR${reset}..."
            InfoAur ${aurpkgs[@]}
        fi
        exit;;
    sync)
        if [[ ! $upgrade ]]; then
            # pacman sync (-S), downloadonly (-Sw), refresh (-Sy) handling
            [[ ! ${pkgs[@]} ]] && sudo $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} || ClassifyPkgs ${pkgs[@]}
            [[ -n "${repopkgs[@]}" ]] && sudo $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
            if [[ -n "${aurpkgs[@]}" ]]; then
                [[ $refresh ]] && [[ ! ${repopkgs[@]} ]] && sudo $pacmanBin -Sy ${pacopts[@]} ${ignoreopts[@]}
                [[ $fallback = true && ! $aur ]] && warn "Package(s) ${colorW}${aurpkgs[@]}${reset} not found in repositories, trying ${colorM}AUR${reset}..."
                Core ${aurpkgs[@]}
            fi
        else
            # pacman sysupgrade (-Su) handling
            ClassifyPkgs ${pkgs[@]} && unset pkgs  # no selective upgrade here
            [[ ! $aur ]] && sudo $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
            [[ -n "${aurpkgs[@]}" ]] && [[ $fallback = true && ! $aur ]] && warn "Package(s) ${colorW}${aurpkgs[@]}${reset} not found in repositories, trying ${colorM}AUR${reset}..."
            [[ ! $repo ]] && [[ $fallback = true || $aur ]] && UpgradeAur && Core ${aurpkgs[@]}
        fi
        exit;;
    upgrades)
        # pacman upgrades (-Qu) handling
        [[ ! $aur ]] && CheckRepo ${pkgs[@]}
        [[ ! $repo ]] && [[ $fallback = true || $aur ]] && CheckAur ${pkgs[@]}
        exit;;
    cleancache)
        # pacman clean (-Sc) handling
        [[ ! $aur ]] && sudo $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${repopkgs[@]}
        [[ ! $repo ]] && [[ $fallback = true || $aur ]] && CleanCache ${pkgs[@]}
        exit;;
    *)
        # others operations handling
        if [[ -z "${pkgs[@]}" || -n "$(echo "${pacmanarg[@]}" | grep -e "-[QT]")" ]]; then
            $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${pkgs[@]}
        else
            sudo $pacmanBin ${pacmanarg[@]} ${pacopts[@]} ${ignoreopts[@]} ${pkgs[@]}
        fi
        exit;;
esac

# vim:set ts=4 sw=2 et:
